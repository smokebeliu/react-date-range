"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classnames = _interopRequireDefault(require("classnames"));
var _dateFns = require("date-fns");
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
var _default = exports.default = /*#__PURE__*/(0, _react.memo)(function DateInput(_ref) {
  let {
    value,
    placeholder,
    disabled,
    readOnly,
    dateOptions,
    dateDisplayFormat,
    ariaLabel,
    className,
    onFocus,
    onChange
  } = _ref;
  const [state, setState] = _react.default.useState({
    invalid: false,
    changed: false,
    value: formatDate(value, dateDisplayFormat, dateOptions)
  });
  _react.default.useEffect(() => {
    setState(s => ({
      ...s,
      value: formatDate(value, dateDisplayFormat, dateOptions)
    }));
  }, [value, dateDisplayFormat, dateOptions]);
  const update = value => {
    const {
      invalid,
      changed
    } = state;
    if (invalid || !changed || !value) {
      return;
    }
    const parsed = (0, _dateFns.parse)(value, dateDisplayFormat, new Date(), dateOptions);
    if ((0, _dateFns.isValid)(parsed)) {
      setState({
        ...state,
        changed: false
      });
      onChange?.(parsed);
    } else {
      setState({
        ...state,
        invalid: true
      });
    }
  };
  const onChangeInternal = event => {
    setState({
      value: event.target.value,
      changed: true,
      invalid: false
    });
  };
  const onKeyDown = event => {
    if (event.key === 'Enter') {
      update(state.value);
    }
  };
  const onBlur = () => {
    update(state.value);
  };
  return /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)('rdrDateInput', className)
  }, /*#__PURE__*/_react.default.createElement("input", {
    readOnly: readOnly,
    disabled: disabled,
    value: state.value,
    placeholder: placeholder,
    "aria-label": ariaLabel,
    onKeyDown: onKeyDown,
    onChange: onChangeInternal,
    onBlur: onBlur,
    onFocus: onFocus
  }), state.invalid ? /*#__PURE__*/_react.default.createElement("span", {
    className: "rdrWarning"
  }, "\u26A0") : null);
});
function formatDate(value, dateDisplayFormat, dateOptions) {
  if (value && (0, _dateFns.isValid)(value)) {
    return (0, _dateFns.format)(value, dateDisplayFormat, dateOptions);
  }
  return '';
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,