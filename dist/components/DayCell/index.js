"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DayCell;
var _dateFns = require("date-fns");
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function DayCell(_ref) {
  let {
    day,
    dayDisplayFormat,
    date,
    ranges,
    preview,
    onPreviewChange,
    disabled,
    isPassive,
    isToday,
    isWeekend,
    isStartOfWeek,
    isEndOfWeek,
    isStartOfMonth,
    isEndOfMonth,
    displayMode,
    onMouseDown,
    onMouseUp,
    onMouseEnter,
    color,
    styles,
    dayContentRenderer
  } = _ref;
  const [state, setState] = _react.default.useState({
    hover: false,
    active: false
  });
  const handleKeyEvent = event => {
    if (["Space", " ", "Enter"].includes(event.key)) {
      if (event.type === 'keydown') {
        onMouseDown?.(day);
      } else {
        onMouseUp?.(day);
      }
    }
  };
  const handleMouseEvent = event => {
    const stateChanges = {
      ...state
    };
    if (disabled) {
      onPreviewChange?.();
      return;
    }
    switch (event.type) {
      case 'mouseenter':
        onMouseEnter?.(day);
        onPreviewChange?.(day);
        stateChanges.hover = true;
        break;
      case 'blur':
      case 'mouseleave':
        stateChanges.hover = false;
        break;
      case 'mousedown':
        stateChanges.active = true;
        onMouseDown?.(day);
        break;
      case 'mouseup':
        event.stopPropagation();
        stateChanges.active = false;
        onMouseUp?.(day);
        break;
      case 'focus':
        onPreviewChange?.(day);
        break;
    }
    if (stateChanges.hover != state.hover || stateChanges.active != state.active) {
      setState(stateChanges);
    }
  };
  const getClassNames = () => {
    return (0, _classnames.default)(styles.day, {
      [styles.dayPassive]: isPassive,
      [styles.dayDisabled]: disabled,
      [styles.dayToday]: isToday,
      [styles.dayWeekend]: isWeekend,
      [styles.dayStartOfWeek]: isStartOfWeek,
      [styles.dayEndOfWeek]: isEndOfWeek,
      [styles.dayStartOfMonth]: isStartOfMonth,
      [styles.dayEndOfMonth]: isEndOfMonth,
      [styles.dayHovered]: state.hover,
      [styles.dayActive]: state.active
    });
  };
  return /*#__PURE__*/_react.default.createElement("button", _extends({
    type: "button",
    onMouseEnter: handleMouseEvent,
    onMouseLeave: handleMouseEvent,
    onFocus: handleMouseEvent,
    onMouseDown: handleMouseEvent,
    onMouseUp: handleMouseEvent,
    onBlur: handleMouseEvent,
    onPauseCapture: handleMouseEvent,
    onKeyDown: handleKeyEvent,
    onKeyUp: handleKeyEvent,
    className: getClassNames()
  }, disabled || isPassive ? {
    tabIndex: -1
  } : {}, {
    style: {
      color
    }
  }), /*#__PURE__*/_react.default.createElement(SelectionPlaceholders, {
    styles: styles,
    ranges: ranges,
    day: day,
    date: date,
    displayMode: displayMode,
    color: color
  }), /*#__PURE__*/_react.default.createElement(PreviewPlaceholder, {
    styles: styles,
    day: day,
    preview: preview
  }), /*#__PURE__*/_react.default.createElement("span", {
    className: styles.dayNumber
  }, dayContentRenderer?.(day) || /*#__PURE__*/_react.default.createElement("span", null, (0, _dateFns.format)(day, dayDisplayFormat))));
}
function SelectionPlaceholders(_ref2) {
  let {
    styles,
    ranges,
    day,
    date,
    displayMode,
    color
  } = _ref2;
  if (displayMode == 'date') {
    const isSelected = (0, _dateFns.isSameDay)(day, date);
    return isSelected ? /*#__PURE__*/_react.default.createElement("span", {
      className: styles.selected,
      style: {
        color
      }
    }) : null;
  }
  const inRanges = ranges.reduce((result, range) => {
    let startDate = range.startDate;
    let endDate = range.endDate;
    if (startDate && endDate && (0, _dateFns.isBefore)(endDate, startDate)) {
      [startDate, endDate] = [endDate, startDate];
    }
    startDate = startDate ? (0, _dateFns.endOfDay)(startDate) : null;
    endDate = endDate ? (0, _dateFns.startOfDay)(endDate) : null;
    const isInRange = (!startDate || (0, _dateFns.isAfter)(day, startDate)) && (!endDate || (0, _dateFns.isBefore)(day, endDate));
    const isStartEdge = !isInRange && (0, _dateFns.isSameDay)(day, startDate);
    const isEndEdge = !isInRange && (0, _dateFns.isSameDay)(day, endDate);
    if (isInRange || isStartEdge || isEndEdge) {
      return [...result, {
        isStartEdge,
        isEndEdge: isEndEdge,
        isInRange,
        ...range
      }];
    }
    return result;
  }, []);
  return inRanges.map((range, i) => /*#__PURE__*/_react.default.createElement("span", {
    key: i,
    className: (0, _classnames.default)({
      [styles.startEdge]: range.isStartEdge,
      [styles.endEdge]: range.isEndEdge,
      [styles.inRange]: range.isInRange
    }),
    style: {
      color: range.color || color
    }
  }));
}
function PreviewPlaceholder(_ref3) {
  let {
    preview,
    day,
    styles
  } = _ref3;
  if (!preview) return null;
  const startDate = preview.startDate ? (0, _dateFns.endOfDay)(preview.startDate) : null;
  const endDate = preview.endDate ? (0, _dateFns.startOfDay)(preview.endDate) : null;
  const isInRange = (!startDate || (0, _dateFns.isAfter)(day, startDate)) && (!endDate || (0, _dateFns.isBefore)(day, endDate));
  const isStartEdge = !isInRange && (0, _dateFns.isSameDay)(day, startDate);
  const isEndEdge = !isInRange && (0, _dateFns.isSameDay)(day, endDate);
  return /*#__PURE__*/_react.default.createElement("span", {
    className: (0, _classnames.default)({
      [styles.dayStartPreview]: isStartEdge,
      [styles.dayInPreview]: isInRange,
      [styles.dayEndPreview]: isEndEdge
    }),
    style: {
      color: preview.color
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,