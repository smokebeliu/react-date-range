"use strict";

var _react = _interopRequireDefault(require("react"));
var _enzyme = require("enzyme");
var _DefinedRange = _interopRequireDefault(require("../DefinedRange"));
var _dateFns = require("date-fns");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
describe('DefinedRange tests', () => {
  test('Should call "renderStaticRangeLabel" callback correct amount of times according to the "hasCustomRendering" option', () => {
    const renderStaticRangeLabel = jest.fn();
    (0, _enzyme.mount)( /*#__PURE__*/_react.default.createElement(_DefinedRange.default, {
      staticRanges: [{
        label: 'Dynamic Label',
        range: {},
        isSelected(range) {
          const definedRange = this.range();
          return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);
        },
        hasCustomRendering: true
      }, {
        label: 'Static Label',
        range: {},
        isSelected(range) {
          const definedRange = this.range();
          return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);
        }
      }, {
        label: 'Hede',
        range: {},
        isSelected(range) {
          const definedRange = this.range();
          return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);
        },
        hasCustomRendering: true
      }],
      renderStaticRangeLabel: renderStaticRangeLabel
    }));
    expect(renderStaticRangeLabel).toHaveBeenCalledTimes(2);
  });
  test('Should render dynamic static label contents correctly', () => {
    const renderItalicLabelContent = () => /*#__PURE__*/_react.default.createElement("i", {
      className: 'italic-label-content'
    }, 'Italic Content');
    const renderBoldLabelContent = () => /*#__PURE__*/_react.default.createElement("b", {
      className: 'bold-label-content'
    }, 'Bold Content');
    const renderSomethingElse = () => /*#__PURE__*/_react.default.createElement("img", {
      className: 'random-image'
    });
    const renderStaticRangeLabel = function (staticRange) {
      let result;
      if (staticRange.id === 'italic') {
        result = renderItalicLabelContent();
      } else if (staticRange.id === 'bold') {
        result = renderBoldLabelContent();
      } else {
        result = renderSomethingElse();
      }
      return result;
    };
    const wrapper = (0, _enzyme.shallow)( /*#__PURE__*/_react.default.createElement(_DefinedRange.default, {
      staticRanges: [{
        id: 'italic',
        range: {},
        isSelected(range) {
          const definedRange = this.range();
          return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);
        },
        hasCustomRendering: true
      }, {
        label: 'Static Label',
        range: {},
        isSelected(range) {
          const definedRange = this.range();
          return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);
        }
      }, {
        id: 'whatever',
        range: {},
        isSelected(range) {
          const definedRange = this.range();
          return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);
        },
        hasCustomRendering: true
      }, {
        id: 'bold',
        range: {},
        isSelected(range) {
          const definedRange = this.range();
          return (0, _dateFns.isSameDay)(range.startDate, definedRange.startDate) && (0, _dateFns.isSameDay)(range.endDate, definedRange.endDate);
        },
        hasCustomRendering: true
      }],
      renderStaticRangeLabel: renderStaticRangeLabel
    }));
    expect(wrapper).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9lbnp5bWUiLCJfRGVmaW5lZFJhbmdlIiwiX2RhdGVGbnMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRlc2NyaWJlIiwidGVzdCIsInJlbmRlclN0YXRpY1JhbmdlTGFiZWwiLCJqZXN0IiwiZm4iLCJtb3VudCIsImNyZWF0ZUVsZW1lbnQiLCJzdGF0aWNSYW5nZXMiLCJsYWJlbCIsInJhbmdlIiwiaXNTZWxlY3RlZCIsImRlZmluZWRSYW5nZSIsImlzU2FtZURheSIsInN0YXJ0RGF0ZSIsImVuZERhdGUiLCJoYXNDdXN0b21SZW5kZXJpbmciLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJyZW5kZXJJdGFsaWNMYWJlbENvbnRlbnQiLCJjbGFzc05hbWUiLCJyZW5kZXJCb2xkTGFiZWxDb250ZW50IiwicmVuZGVyU29tZXRoaW5nRWxzZSIsInN0YXRpY1JhbmdlIiwicmVzdWx0IiwiaWQiLCJ3cmFwcGVyIiwic2hhbGxvdyIsInRvTWF0Y2hTbmFwc2hvdCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0RlZmluZWRSYW5nZS9pbmRleC50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtb3VudCwgc2hhbGxvdyB9IGZyb20gJ2VuenltZSc7XG5cbmltcG9ydCBEZWZpbmVkUmFuZ2UgZnJvbSAnLi4vRGVmaW5lZFJhbmdlJztcbmltcG9ydCB7IGlzU2FtZURheSB9IGZyb20gJ2RhdGUtZm5zJztcblxuZGVzY3JpYmUoJ0RlZmluZWRSYW5nZSB0ZXN0cycsICgpID0+IHtcbiAgdGVzdCgnU2hvdWxkIGNhbGwgXCJyZW5kZXJTdGF0aWNSYW5nZUxhYmVsXCIgY2FsbGJhY2sgY29ycmVjdCBhbW91bnQgb2YgdGltZXMgYWNjb3JkaW5nIHRvIHRoZSBcImhhc0N1c3RvbVJlbmRlcmluZ1wiIG9wdGlvbicsICgpID0+IHtcbiAgICBjb25zdCByZW5kZXJTdGF0aWNSYW5nZUxhYmVsID0gamVzdC5mbigpO1xuXG4gICAgbW91bnQoXG4gICAgICA8RGVmaW5lZFJhbmdlXG4gICAgICAgIHN0YXRpY1Jhbmdlcz17W1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGxhYmVsOiAnRHluYW1pYyBMYWJlbCcsXG4gICAgICAgICAgICByYW5nZToge30sXG4gICAgICAgICAgICBpc1NlbGVjdGVkKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRlZmluZWRSYW5nZSA9IHRoaXMucmFuZ2UoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBpc1NhbWVEYXkocmFuZ2Uuc3RhcnREYXRlLCBkZWZpbmVkUmFuZ2Uuc3RhcnREYXRlKSAmJlxuICAgICAgICAgICAgICAgIGlzU2FtZURheShyYW5nZS5lbmREYXRlLCBkZWZpbmVkUmFuZ2UuZW5kRGF0ZSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNDdXN0b21SZW5kZXJpbmc6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ1N0YXRpYyBMYWJlbCcsXG4gICAgICAgICAgICByYW5nZToge30sXG4gICAgICAgICAgICBpc1NlbGVjdGVkKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRlZmluZWRSYW5nZSA9IHRoaXMucmFuZ2UoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBpc1NhbWVEYXkocmFuZ2Uuc3RhcnREYXRlLCBkZWZpbmVkUmFuZ2Uuc3RhcnREYXRlKSAmJlxuICAgICAgICAgICAgICAgIGlzU2FtZURheShyYW5nZS5lbmREYXRlLCBkZWZpbmVkUmFuZ2UuZW5kRGF0ZSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsYWJlbDogJ0hlZGUnLFxuICAgICAgICAgICAgcmFuZ2U6IHt9LFxuICAgICAgICAgICAgaXNTZWxlY3RlZChyYW5nZSkge1xuICAgICAgICAgICAgICBjb25zdCBkZWZpbmVkUmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgaXNTYW1lRGF5KHJhbmdlLnN0YXJ0RGF0ZSwgZGVmaW5lZFJhbmdlLnN0YXJ0RGF0ZSkgJiZcbiAgICAgICAgICAgICAgICBpc1NhbWVEYXkocmFuZ2UuZW5kRGF0ZSwgZGVmaW5lZFJhbmdlLmVuZERhdGUpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzQ3VzdG9tUmVuZGVyaW5nOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIF19XG4gICAgICAgIHJlbmRlclN0YXRpY1JhbmdlTGFiZWw9e3JlbmRlclN0YXRpY1JhbmdlTGFiZWx9XG4gICAgICAvPlxuICAgICk7XG5cbiAgICBleHBlY3QocmVuZGVyU3RhdGljUmFuZ2VMYWJlbCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDIpO1xuICB9KTtcblxuICB0ZXN0KCdTaG91bGQgcmVuZGVyIGR5bmFtaWMgc3RhdGljIGxhYmVsIGNvbnRlbnRzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCByZW5kZXJJdGFsaWNMYWJlbENvbnRlbnQgPSAoKSA9PiAoXG4gICAgICA8aSBjbGFzc05hbWU9eydpdGFsaWMtbGFiZWwtY29udGVudCd9PnsnSXRhbGljIENvbnRlbnQnfTwvaT5cbiAgICApO1xuICAgIGNvbnN0IHJlbmRlckJvbGRMYWJlbENvbnRlbnQgPSAoKSA9PiA8YiBjbGFzc05hbWU9eydib2xkLWxhYmVsLWNvbnRlbnQnfT57J0JvbGQgQ29udGVudCd9PC9iPjtcbiAgICBjb25zdCByZW5kZXJTb21ldGhpbmdFbHNlID0gKCkgPT4gPGltZyBjbGFzc05hbWU9eydyYW5kb20taW1hZ2UnfSAvPjtcblxuICAgIGNvbnN0IHJlbmRlclN0YXRpY1JhbmdlTGFiZWwgPSBmdW5jdGlvbiAoc3RhdGljUmFuZ2UpIHtcbiAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgIGlmIChzdGF0aWNSYW5nZS5pZCA9PT0gJ2l0YWxpYycpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVuZGVySXRhbGljTGFiZWxDb250ZW50KCk7XG4gICAgICB9IGVsc2UgaWYgKHN0YXRpY1JhbmdlLmlkID09PSAnYm9sZCcpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVuZGVyQm9sZExhYmVsQ29udGVudCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gcmVuZGVyU29tZXRoaW5nRWxzZSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvdyhcbiAgICAgIDxEZWZpbmVkUmFuZ2VcbiAgICAgICAgc3RhdGljUmFuZ2VzPXtbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdpdGFsaWMnLFxuICAgICAgICAgICAgcmFuZ2U6IHt9LFxuICAgICAgICAgICAgaXNTZWxlY3RlZChyYW5nZSkge1xuICAgICAgICAgICAgICBjb25zdCBkZWZpbmVkUmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgaXNTYW1lRGF5KHJhbmdlLnN0YXJ0RGF0ZSwgZGVmaW5lZFJhbmdlLnN0YXJ0RGF0ZSkgJiZcbiAgICAgICAgICAgICAgICBpc1NhbWVEYXkocmFuZ2UuZW5kRGF0ZSwgZGVmaW5lZFJhbmdlLmVuZERhdGUpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzQ3VzdG9tUmVuZGVyaW5nOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbGFiZWw6ICdTdGF0aWMgTGFiZWwnLFxuICAgICAgICAgICAgcmFuZ2U6IHt9LFxuICAgICAgICAgICAgaXNTZWxlY3RlZChyYW5nZSkge1xuICAgICAgICAgICAgICBjb25zdCBkZWZpbmVkUmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgaXNTYW1lRGF5KHJhbmdlLnN0YXJ0RGF0ZSwgZGVmaW5lZFJhbmdlLnN0YXJ0RGF0ZSkgJiZcbiAgICAgICAgICAgICAgICBpc1NhbWVEYXkocmFuZ2UuZW5kRGF0ZSwgZGVmaW5lZFJhbmdlLmVuZERhdGUpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICd3aGF0ZXZlcicsXG4gICAgICAgICAgICByYW5nZToge30sXG4gICAgICAgICAgICBpc1NlbGVjdGVkKHJhbmdlKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRlZmluZWRSYW5nZSA9IHRoaXMucmFuZ2UoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICBpc1NhbWVEYXkocmFuZ2Uuc3RhcnREYXRlLCBkZWZpbmVkUmFuZ2Uuc3RhcnREYXRlKSAmJlxuICAgICAgICAgICAgICAgIGlzU2FtZURheShyYW5nZS5lbmREYXRlLCBkZWZpbmVkUmFuZ2UuZW5kRGF0ZSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNDdXN0b21SZW5kZXJpbmc6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ2JvbGQnLFxuICAgICAgICAgICAgcmFuZ2U6IHt9LFxuICAgICAgICAgICAgaXNTZWxlY3RlZChyYW5nZSkge1xuICAgICAgICAgICAgICBjb25zdCBkZWZpbmVkUmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgaXNTYW1lRGF5KHJhbmdlLnN0YXJ0RGF0ZSwgZGVmaW5lZFJhbmdlLnN0YXJ0RGF0ZSkgJiZcbiAgICAgICAgICAgICAgICBpc1NhbWVEYXkocmFuZ2UuZW5kRGF0ZSwgZGVmaW5lZFJhbmdlLmVuZERhdGUpXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaGFzQ3VzdG9tUmVuZGVyaW5nOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIF19XG4gICAgICAgIHJlbmRlclN0YXRpY1JhbmdlTGFiZWw9e3JlbmRlclN0YXRpY1JhbmdlTGFiZWx9XG4gICAgICAvPlxuICAgICk7XG5cbiAgICBleHBlY3Qod3JhcHBlcikudG9NYXRjaFNuYXBzaG90KCk7XG4gIH0pO1xufSk7XG4iXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsT0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsYUFBQSxHQUFBSCxzQkFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUcsUUFBQSxHQUFBSCxPQUFBO0FBQXFDLFNBQUFELHVCQUFBSyxHQUFBLFdBQUFBLEdBQUEsSUFBQUEsR0FBQSxDQUFBQyxVQUFBLEdBQUFELEdBQUEsS0FBQUUsT0FBQSxFQUFBRixHQUFBO0FBRXJDRyxRQUFRLENBQUMsb0JBQW9CLEVBQUUsTUFBTTtFQUNuQ0MsSUFBSSxDQUFDLG9IQUFvSCxFQUFFLE1BQU07SUFDL0gsTUFBTUMsc0JBQXNCLEdBQUdDLElBQUksQ0FBQ0MsRUFBRSxDQUFDLENBQUM7SUFFeEMsSUFBQUMsYUFBSyxnQkFDSGQsTUFBQSxDQUFBUSxPQUFBLENBQUFPLGFBQUEsQ0FBQ1gsYUFBQSxDQUFBSSxPQUFZO01BQ1hRLFlBQVksRUFBRSxDQUNaO1FBQ0VDLEtBQUssRUFBRSxlQUFlO1FBQ3RCQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ1RDLFVBQVVBLENBQUNELEtBQUssRUFBRTtVQUNoQixNQUFNRSxZQUFZLEdBQUcs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