"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calcFocusDate = calcFocusDate;
exports.findNextRangeIndex = findNextRangeIndex;
exports.generateStyles = generateStyles;
exports.getMonthDisplayRange = getMonthDisplayRange;
exports.getWeeksNumbers = getWeeksNumbers;
var _classnames = _interopRequireDefault(require("classnames"));
var _dateFns = require("date-fns");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function calcFocusDate(currentFocusedDate, shownDate, date, months, ranges, focusedRange, displayMode) {
  // find primary date according the props
  let targetInterval;
  if (displayMode === 'dateRange') {
    const range = ranges[focusedRange[0]];
    targetInterval = {
      startDate: range?.startDate,
      endDate: range?.endDate
    };
  } else {
    targetInterval = {
      startDate: date,
      endDate: date
    };
  }
  targetInterval.startDate = (0, _dateFns.startOfMonth)(targetInterval.startDate || new Date());
  targetInterval.endDate = (0, _dateFns.endOfMonth)(targetInterval.endDate || targetInterval.startDate);
  const targetDate = targetInterval.startDate || targetInterval.endDate || shownDate || new Date();

  // initial focus
  if (!currentFocusedDate) return shownDate || targetDate;

  // // just return targetDate for native scrolled calendars
  // if (scroll.enabled) return targetDate;
  if ((0, _dateFns.differenceInCalendarMonths)(targetInterval.startDate, targetInterval.endDate) > months) {
    // don't change focused if new selection in view area
    return currentFocusedDate;
  }
  return targetDate;
}
function findNextRangeIndex(ranges) {
  let currentRangeIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
  const nextIndex = ranges.findIndex((range, i) => i > currentRangeIndex && range.autoFocus !== false && !range.disabled);
  if (nextIndex !== -1) return nextIndex;
  return ranges.findIndex(range => range.autoFocus !== false && !range.disabled);
}
function getMonthDisplayRange(date, dateOptions, fixedHeight) {
  const startDateOfMonth = (0, _dateFns.startOfMonth)(date);
  const endDateOfMonth = (0, _dateFns.endOfMonth)(date);
  const startDateOfCalendar = (0, _dateFns.startOfWeek)(startDateOfMonth, dateOptions);
  let endDateOfCalendar = (0, _dateFns.endOfWeek)(endDateOfMonth, dateOptions);
  if (fixedHeight && (0, _dateFns.differenceInCalendarDays)(endDateOfCalendar, startDateOfCalendar) <= 34) {
    endDateOfCalendar = (0, _dateFns.addDays)(endDateOfCalendar, 7);
  }
  return {
    start: startDateOfCalendar,
    end: endDateOfCalendar,
    startDateOfMonth,
    endDateOfMonth
  };
}
function generateStyles(sources) {
  if (!sources.length) return {};
  const generatedStyles = sources.filter(source => Boolean(source)).reduce((styles, styleSource) => {
    Object.keys(styleSource).forEach(key => {
      styles[key] = (0, _classnames.default)(styles[key], styleSource[key]);
    });
    return styles;
  }, {});
  return generatedStyles;
}
function getWeeksNumbers(start, end) {
  const numbers = [];
  let current = (0, _dateFns.getISOWeek)(start);
  while (start < end) {
    numbers.push(current);
    start = (0, _dateFns.addDays)(start, 7);
    current = (0, _dateFns.getISOWeek)(start);
  }
  return numbers;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,